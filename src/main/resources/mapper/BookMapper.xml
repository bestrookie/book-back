<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bestrookie.mapper.BookMapper">
    <!--    书籍信息-->
    <resultMap id="bookInfo" type="com.bestrookie.pojo.BookPojo">
        <id column="b_id" property="bookId"/>
        <result column="b_name" property="bookName"/>
        <result column="b_author" property="author"/>
        <result column="b_photo" property="image"/>
        <result column="b_address" property="resource"/>
        <result column="b_publish_date" property="publishDate"/>
        <result column="b_publisher" property="publisher"/>
        <result column="user_id" property="userId"/>
        <result column="type_id" property="type"/>
        <result column="b_click_count" property="bookClick"/>
        <result column="b_identity" property="identity"/>
        <result column="b_upload_date" property="uploadDate"/>
        <result column="b_state" property="bookState"/>
        <result column="b_price" property="bookPrice"/>
        <result column="b_discount" property="bookDiscount"/>
        <result column="bt_name" property="typeName"/>
        <result column="b_collect_count" property="bookCollect"/>
        <association property="discussionId" select="com.bestrookie.mapper.BookDiscussionsMapper.queryDiscussionId"
                     column="b_id"/>
        <association property="user" select="com.bestrookie.mapper.UserMapper.queryUserById" column="user_id"/>
    </resultMap>
    <!--    添加书籍信息-->
    <insert id="addBookMapper" parameterType="com.bestrookie.pojo.BookPojo">
        INSERT INTO book_db.books
        (b_name, b_author, b_photo, b_address, b_publish_date, b_publisher, user_id, type_id, b_identity, b_upload_date,b_collect_count)
        VALUES (#{bookName}, #{author}, #{image}, #{resource}, #{publishDate}, #{publisher}, #{userId}, #{type},
                #{identity}, #{uploadDate},#{bookCollect})
    </insert>
    <!--    根据身份码查询是否存在书籍-->
    <select id="queryExistsIdentity" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM book_db.books
        WHERE b_identity = #{identity}
    </select>
    <!--    查询所有书籍-->
    <select id="queryAllBooks" resultMap="bookInfo">
        SELECT book_db.books.*, book_db.book_type.bt_name
        FROM book_db.books
                 JOIN book_db.book_type
                      ON books.type_id = book_type.bt_id
        WHERE b_state = true
    </select>
    <!--    根据id查找书籍信息-->
    <select id="queryBookById" resultMap="bookInfo">
        SELECT book_db.books.*, book_db.book_type.bt_name
        FROM book_db.books
                 JOIN book_db.book_type
                      ON books.type_id = book_type.bt_id
        WHERE b_id = #{bookId}
    </select>
    <!--    根据userId查询书籍-->
    <select id="queryMyUpload" resultMap="bookInfo">
        SELECT *
        FROM book_db.books
        WHERE user_id = #{userId}
        ORDER BY b_upload_date DESC
    </select>
    <!--    查看我的收藏-->
    <select id="queryMyCollection" resultMap="bookInfo">
        SELECT *
        FROM book_db.books
                 JOIN book_db.collection
                      on books.b_id = collection.b_id
        WHERE collection.user_id = #{userId}
        ORDER BY collection_date DESC
    </select>
    <!--    根据类型查看书籍-->
    <select id="queryAllByType" resultMap="bookInfo">
        SELECT *
        FROM book_db.books
        WHERE type_id = #{typeId}
        ORDER BY b_upload_date DESC
    </select>
    <!--    模糊查询-->
    <select id="queryFuzzy" resultMap="bookInfo">
        SELECT *
        FROM book_db.books
        WHERE (b_name
                   like CONCAT('%', #{key}, '%')
            or b_author
                   like CONCAT('%', #{key}, '%')
            or b_publisher
                   like CONCAT('%', #{key}, '%'))
          AND b_state = true
        ORDER BY b_upload_date DESC
    </select>
    <!--    根据类型模糊查询-->
    <select id="queryFuzzyByType" resultMap="bookInfo">
        SELECT *
        FROM book_db.books
        WHERE (b_name
                   like CONCAT('%', #{key}, '%')
            or b_author
                   like CONCAT('%', #{key}, '%')
            or b_publisher
                   like CONCAT('%', #{key}, '%'))
          AND type_id = #{typeId}
          AND b_state = true
        ORDER BY b_upload_date DESC
    </select>
    <!--    根据类型查询书籍按照点击量排序-->
    <select id="booksAreRankByType" resultMap="bookInfo">
        SELECT *
        FROM book_db.books
        WHERE type_id = #{typeId}
        ORDER BY b_click_count
        LIMIT 5
    </select>
<!--    查询未过审书籍-->
    <select id="queryUnBook" resultMap="bookInfo">
        SELECT *
        FROM book_db.books
        WHERE b_state = false
    </select>
<!--    书籍排行-->
    <select id="bookTop" resultMap="bookInfo">
        SELECT * FROM book_db.books ORDER BY (b_click_count * 0.1+b_collect_count)DESC
    </select>
    <!--    修改书的状态码-->
    <update id="updateBookState">
        UPDATE book_db.books
        SET b_state = #{state}
        WHERE b_identity = #{identity}
    </update>
    <!--    根据书的状态码修改价格-->
    <update id="updateBookPriceByIdentity">
        Update book_db.books
        SET b_price = #{price}
        WHERE b_identity = #{identity}
    </update>
    <!--    修改点击量信息-->
    <update id="updateBookSearch">
        UPDATE book_db.books
        SET b_click_count =#{clickCount}
        WHERE b_id = #{bookId}
    </update>
    <!--    根据id修改状态-->
    <update id="updateStateById">
        UPDATE book_db.books
        SET b_state = #{state}
        WHERE b_id = #{bookId}
    </update>
    <!--    修改书籍信息-->
    <update id="updateBookInfo">
        UPDATE book_db.books
        SET b_name         = #{bookName},
            b_author       = #{author},
            b_publisher    =#{publisher},
            b_publish_date =#{publishDate},
            type_id        =#{type}
        WHERE b_id = #{bookId}
    </update>
<!--    收藏数量加一-->
    <update id="addCollection">
        UPDATE book_db.books SET b_collect_count = (b_collect_count + 1) WHERE b_id = #{bookId}
    </update>
<!--    收藏数量减一-->
    <update id="reduceCollection">
        UPDATE book_db.books SET b_collect_count = (b_collect_count - 1) WHERE b_id = #{bookId}
    </update>


</mapper>